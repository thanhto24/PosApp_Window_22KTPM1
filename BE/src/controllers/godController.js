const models = require("../models");

// üü¢ H√†m l·∫•y model theo t√™n
const getModel = (modelName) => {
    const model = models[modelName];
    if (!model) throw new Error(`Model '${modelName}' kh√¥ng t·ªìn t·∫°i`);
    return model;
};

// üü¢ L·∫•y danh s√°ch (h·ªó tr·ª£ ph√¢n trang, l·ªçc, s·∫Øp x·∫øp)
exports.getAll = async (req, res) => {
    try {
        const { modelName } = req.params;
        const Model = getModel(modelName);

        const data = await Model.find(); // L·∫•y to√†n b·ªô d·ªØ li·ªáu
        res.json(data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};


// üü¢ Th√™m m·ªõi
exports.insert = async (req, res) => {
    try {
        const { modelName } = req.params;
        const Model = getModel(modelName);

        const entity = new Model(req.body);
        await entity.save();
        res.json({ message: "Th√™m th√†nh c√¥ng!", entity });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// üü¢ X√≥a theo ƒëi·ªÅu ki·ªán
exports.removeByQuery = async (req, res) => {
    try {
        const { modelName } = req.params;
        const Model = getModel(modelName);

        const { whereClause } = req.body;
        if (!whereClause || Object.keys(whereClause).length === 0) {
            return res.status(400).json({ error: "Thi·∫øu ƒëi·ªÅu ki·ªán x√≥a" });
        }

        const result = await Model.deleteMany(whereClause);
        res.json({ message: `ƒê√£ x√≥a ${result.deletedCount} b·∫£n ghi` });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// üü¢ C·∫≠p nh·∫≠t theo ƒëi·ªÅu ki·ªán
exports.updateByQuery = async (req, res) => {
    try {
        const { modelName } = req.params;
        const Model = getModel(modelName);

        const { setValues, whereClause } = req.body;
        if (!setValues || !whereClause) {
            return res.status(400).json({ error: "Thi·∫øu d·ªØ li·ªáu c·∫≠p nh·∫≠t ho·∫∑c ƒëi·ªÅu ki·ªán" });
        }

        const result = await Model.updateMany(whereClause, { $set: setValues });
        res.json({ message: `ƒê√£ c·∫≠p nh·∫≠t ${result.modifiedCount} b·∫£n ghi` });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};
